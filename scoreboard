#!/usr/bin/env python3

import sys
if len(sys.argv) > 1:
    qt = True
    configfile = sys.argv[1]
else:
    qt = False
    import RPi.GPIO as GPIO

from time import sleep
import subprocess
from config import Config
from multiprocessing.connection import Client
import signal

process = None
mode = None
running = True


def switch_toggled(channel):
    global process

    sleep(0.25)
    if process and ((GPIO.input(15) == 0 and mode == 'offline') or (GPIO.input(15) == 1 and mode == 'online')):
        print('Killing old process')
        process.kill()
        process = None


def sig_handler(signum, frame):
    global process
    global running

    running = False
    if process:
        process.kill()
        process = None


if qt:
    signal.signal(signal.SIGTERM, sig_handler)
    signal.signal(signal.SIGINT, sig_handler)
    display_process = subprocess.Popen(["python","./qt_display.py",configfile])
    config = Config(configfile)
else:
    # setup the online / offline switch
    GPIO.setwarnings(False)
    GPIO.setmode(GPIO.BCM)
    GPIO.setup(15, GPIO.IN, GPIO.PUD_UP)
    GPIO.add_event_detect(15, GPIO.BOTH, callback=switch_toggled, bouncetime=500)

    display_process = subprocess.Popen(["taskset","8","python3","/bin/display.py"])
    config = Config()
config.load()


# start up the scoreboard in the correct mode
while running:
    try:

        if qt:
            display = Client(('localhost', config.display.getint("port", 6000)), authkey=b'vbscores')
            display.send(['mesg', 'Connecting ...'])
            display.send(['close'])
            print('Starting QT Mode')

            # start the app
            process = subprocess.Popen(["python","./sb_qt.py",configfile])
            process.wait()
            display = Client(('localhost', config.display.getint("port", 6000)), authkey=b'vbscores')
            display.send(['shutdown'])
            display_process.kill()
            print('QT Mode Exited')

        elif GPIO.input(15) == 0:
            display = Client(('localhost', config.display.getint("port", 6000)), authkey=b'vbscores')
            display.send(['mesg', 'Connecting ...'])
            display.send(['close'])
            print('Starting Online Mode')

            # online mode
            mode = 'online'
            sleep(0.25)

            # enable wifi
            subprocess.run(["killall", "-q", "wpa_supplicant"])
            with open('/etc/wpa_supplicant.conf', "w") as outfile:
                subprocess.run(["wpa_passphrase", config.wifi["ssid"], config.wifi["password"]], stdout=outfile)
                subprocess.run(["cat", "/etc/wpa_supplicant.base"], stdout=outfile)
            subprocess.run(["ifup", "wlan0"])

            # start the app
            process = subprocess.Popen(["python3","/bin/sb_online.py"])
            process.wait()
            print('Online Mode Exited')

        else:
            print('Starting Offline Mode')

            # offline mode
            mode = 'offline'
            process = subprocess.Popen(["python3","/bin/sb_offline.py"])
            process.wait()
            print('Offline Mode Exited')

    except ConnectionRefusedError:
        sleep(0.25)
    except Exception as e:
        print(e)

